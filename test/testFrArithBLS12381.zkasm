; constants needed by executor C++
CONST %N = 2**19
CONST %MAX_CNT_STEPS_LIMIT = %N
CONST %MAX_CNT_ARITH_LIMIT = %N
CONST %MAX_CNT_BINARY_LIMIT = %N
CONST %MAX_CNT_MEM_ALIGN_LIMIT = %N
CONST %MAX_CNT_KECCAK_F_LIMIT = %N
CONST %MAX_CNT_PADDING_PG_LIMIT = %N
CONST %MAX_CNT_POSEIDON_G_LIMIT = %N

INCLUDE "../src/constantsBLS12381.zkasm"
CONSTL %BLS12_381_R_DOUBLE = 0xe7db4ea6533afa906673b0101343b00aa77b4805fffcb7fdfffffffe00000002n;

VAR GLOBAL lastHashKId
VAR GLOBAL lastHashPId

VAR GLOBAL initial_A
VAR GLOBAL initial_B
VAR GLOBAL initial_C
VAR GLOBAL initial_D
VAR GLOBAL initial_E
VAR GLOBAL initial_CTX
VAR GLOBAL initial_SP
VAR GLOBAL initial_PC
VAR GLOBAL initial_GAS
VAR GLOBAL initial_SR
VAR GLOBAL initial_RR
VAR GLOBAL initial_HASHPOS
VAR GLOBAL initial_RCX

start:

        STEP => A
        0 :ASSERT


        A           :MSTORE(initial_A)
        B           :MSTORE(initial_B)
        C           :MSTORE(initial_C)
        D           :MSTORE(initial_D)
        E           :MSTORE(initial_E)
        CTX         :MSTORE(initial_CTX)
        SP          :MSTORE(initial_SP)
        PC          :MSTORE(initial_PC)
        GAS         :MSTORE(initial_GAS)
        SR          :MSTORE(initial_SR)
        RR          :MSTORE(initial_RR)
        HASHPOS     :MSTORE(initial_HASHPOS)
        RCX         :MSTORE(initial_RCX)
        0 => A,B,C,D,E,CTX, SP, PC, GAS, SR, RR, HASHPOS, RCX

        -1          :MSTORE(lastHashKId)
        -1          :MSTORE(lastHashPId)

        ; 1] Addition
	39496249827285530928985358464429044301056989222824370900829994865715303279131n => A
	24619739857197353390719861481183010158805393681361319080009521176802700141009n => C
	:CALL(addFrBLS12381)
	C => A
	11680114509356693840257479437426088622171830403658052158235857342579422235627n	:ASSERT

	25264721585589764039123908414008341045531236904914685411320550484114654850863n => A
	29111229402489971846271524660655487332183769773434864670372673306887902871779n => C
	:CALL(addFrBLS12381)
	C => A
	1940075812953545405947692566477862540024454177821912259089565091063976538129n	:ASSERT

	19348684511170545375822582468294030127732505495520414972413736702747800660163n => A
	27675175790439608470997313264256626683563193020815239269403328021118230083581n => C
	:CALL(addFrBLS12381)
	C => A
	47023860301610153846819895732550656811295698516335654241817064723866030743744n	:ASSERT

	26407119198633667087471446645449560415522513903031134292721810138175976283929n => A
	47127298330949726942269764804738354586800084363023794624853198421818295050162n => C
	:CALL(addFrBLS12381)
	C => A
	21098542354457203550293470942001949164632045765527291094971349860055690149578n	:ASSERT

	5867153282900066636620634891400650926284822218795918571459178613357768623675n => A
	10113274061874988293206081908481792757711681361339046325959913018320899110241n => C
	:CALL(addFrBLS12381)
	C => A
	15980427344775054929826716799882443683996503580134964897419091631678667733916n	:ASSERT

	43481785422992633893759288152374496100070892859665868239008703668495282246682n => A
	47450717795297267686789198555265626207437262855840419154286100333314538417054n => C
	:CALL(addFrBLS12381)
	C => A
	38496628043163711101100746199454156469817603214978649570691145301871239479223n	:ASSERT

	4919177091075782888024783907973663838449740424939415393476302614633914086643n => A
	7986364051172971178679759228814520067851659679587724942180697996980706575222n => C
	:CALL(addFrBLS12381)
	C => A
	12905541142248754066704543136788183906301400104527140335657000611614620661865n	:ASSERT

	42581258659629387546847427097584009455230611754187626686142932897526374687510n => A
	16645395690610647771124673464205868181909994757853894776626059442125063059638n => C
	:CALL(addFrBLS12381)
	C => A
	6790779175113844838524360053603911799450054011513883640165333639712856562635n	:ASSERT

	35712914440824978376722773945678223296927924814803479187853093859852820586064n => A
	39744291109033332122321421636214125507188968358648266400409292739250690320130n => C
	:CALL(addFrBLS12381)
	C => A
	23021330374732120019596455073706382966426340672924107765658727899164929721681n	:ASSERT

	25020087493608353006395511954063127679857484945472128877788733169873313963938n => A
	1660156957401188847238657467206193884328122795487861662497573525964418457563n => C
	:CALL(addFrBLS12381)
	C => A
	26680244451009541853634169421269321564185607740959990540286306695837732421501n	:ASSERT

        ; 2] Subtraction
	43766469834099610299952662846275745700795475674705275044281921267665431579229n => A
	24751931473446957099737049727096701506334569394070193303343107729698424023936n => C
	:CALL(subFrBLS12381)
	C => A
	19014538360652653200215613119179044194460906280635081740938813537967007555293n	:ASSERT

	16333417565118292593928429142436586055014440036784148317666424662723630240972n => A
	32041787115218022495752330012681579268566566866736378890510575212909979989717n => C
	:CALL(subFrBLS12381)
	C => A
	36727505625026460577623839637940972624138425670575407249759508149752231435768n	:ASSERT

	39699732344232529357765314520247780950249062164433967650331856824161865229225n => A
	14207856116859066688677427136902839929400174289774051505626835009953418138937n => C
	:CALL(subFrBLS12381)
	C => A
	25491876227373462669087887383344941020848887874659916144705021814208447090288n	:ASSERT

	37562484518209617508518876388688652277055077109207163965020267130948796901441n => A
	41509732814349395626312253172006692118341107488354832910817404055002494788881n => C
	:CALL(subFrBLS12381)
	C => A
	48488626878986412361654363724867925996404522121379968876806521775884883297073n	:ASSERT

	1066933422140168864925233874546652150124540977973636893340478296907684025491n => A
	48482739026716172744720615169759629738929690181137546443274873937531319487616n => C
	:CALL(subFrBLS12381)
	C => A
	5020069570550186599652359212972988248885403297363728272669263059314945722388n	:ASSERT

	40689432810431707697359401543612519649404961452042707960495165848148154059717n => A
	19971072001655749647468412511426520215271555608943653350341764566113992354862n => C
	:CALL(subFrBLS12381)
	C => A
	20718360808775958049890989032185999434133405843099054610153401282034161704855n	:ASSERT

	52356573910195328840721563038799560499537344674284237039529057729320392631812n => A
	46042402244992031590509916155791742099191563319906511940274397662865247083736n => C
	:CALL(subFrBLS12381)
	C => A
	6314171665203297250211646883007818400345781354377725099254660066455145548076n	:ASSERT

	26603135573539673132060331836926028018471021057201906442397585680667212495779n => A
	4420276432603053473271988683728363900500201048280127209036851803670558272260n => C
	:CALL(subFrBLS12381)
	C => A
	22182859140936619658788343153197664117970820008921779233360733876996654223519n	:ASSERT

	43028401066099910871550684831921280766502765629891967498528693075337447789556n => A
	33295602916277077071632260308572157743054316472009882517220826748935347976255n => C
	:CALL(subFrBLS12381)
	C => A
	9732798149822833799918424523349123023448449157882084981307866326402099813301n	:ASSERT

	43799041478339589615646102543371196707560430363981842767700877430705740803618n => A
	18433269369671620136777141551769838499060397627229938849805341365935577529016n => C
	:CALL(subFrBLS12381)
	C => A
	25365772108667969478868960991601358208500032736751903917895536064770163274602n	:ASSERT

        ; 3] Multiplication
	16011068264464929181413262093946507910420742029952312655491872843896418426171n => A
	20280489990326744650860118643852926071857546769040493027066242487891277747267n => B
	:CALL(mulFrBLS12381)
	C => A
	21593985390533995292521524585745530655792979818482693270827051805596573920133n	:ASSERT

	14042976522837353167763944417084268424118043508995830517499859333034749184194n => A
	43778098243581329651776157387906821903578020524130747946152806930170885906064n => B
	:CALL(mulFrBLS12381)
	C => A
	5187379673317268459653663165647425086299161063811834331541466871093889261029n	:ASSERT

	28032431778872104999355471010399343973906557673548940594126044767030400986906n => A
	33337189114844361333738490356278001571018541319017241061353696386412921672937n => B
	:CALL(mulFrBLS12381)
	C => A
	29092223499898592225544368594260437872698284938062569128141748693745283784369n	:ASSERT

	26016487849025419753873533948704969202944141288082445262256711939436637399188n => A
	38465582310761389107904277255764663966688215228191557525128328846597751073905n => B
	:CALL(mulFrBLS12381)
	C => A
	14978229694136363012384894679672981866633176208135904807807349525864645138462n	:ASSERT

	50884684378673657152704120182019835785589266222677144798450616810074919407254n => A
	11721725958257430185681996097401376341738480507159365895402656408428496486252n => B
	:CALL(mulFrBLS12381)
	C => A
	18724783170656646026271204738668033732595290564088078432712998093184358201384n	:ASSERT

	43709229214041720434805359140625469117715316739270073110117516397979530560415n => A
	13677931487223107830258225838166124239311163881325615051362421944657980645534n => B
	:CALL(mulFrBLS12381)
	C => A
	10849605024720840829791656933648857739315048640571545487091033072383097676134n	:ASSERT

	40394339520034305432501737005031886064944200655897984716428471189543700197275n => A
	14980056188921325515505259048247490611697603181764693052089636678047935039315n => B
	:CALL(mulFrBLS12381)
	C => A
	18857849429820693587354035091807705741063540049976437391211420967388970897558n	:ASSERT

	8365605545130563456994314479293456288275461417600067942791666509013565711973n => A
	33678788387711023345417340844468826259299657521313078246597457551711999681883n => B
	:CALL(mulFrBLS12381)
	C => A
	40488563859689867472430562449266920483685962186974446281075670390100229309663n	:ASSERT

	643723410905733198610100349289153896115272988433451645045712762642604105915n => A
	21067970248775547760564903579394899022254737208860622554173095162015683182793n => B
	:CALL(mulFrBLS12381)
	C => A
	6217921573920826291808907974009887271735882738907393337449583634659555628987n	:ASSERT

	41266270356498347020790364321717509960846802164539365945570340104439522016860n => A
	44628012806358451303051731996617076884394093683759121123691853195196246293531n => B
	:CALL(mulFrBLS12381)
	C => A
	26282725157690705972087576432526214957153777669159528544989760586259749194877n	:ASSERT

        ; 4] Squaring
	50194013784107028685992223190972924316001643780559513802055246755729539804321n => A
	:CALL(squareFrBLS12381)
	36974563562914164728225094628185909066244284877969800733317382559969287870795n	:ASSERT

	9594626425750384835044742556661619838091191397932981611220411506512101282054n => A
	:CALL(squareFrBLS12381)
	771353232019417562631766790375282118590886063762424268899171981822471213373n	:ASSERT

	19688691683659958484210376638303989140679289464204958372941687982550787997916n => A
	:CALL(squareFrBLS12381)
	16649649370360283920938972373197553852295166108933515864684415234492491046277n	:ASSERT

	27816440868673840385746590038101215005392435763811696364951279813839985646709n => A
	:CALL(squareFrBLS12381)
	50885267726983316565080859422847305699688927568363497465999577204149258661102n	:ASSERT

	47490378150213399367280703653592392376029103211322572132239818840985377347996n => A
	:CALL(squareFrBLS12381)
	45979558865909500147373451137947314226163166412821445546086471357646966032589n	:ASSERT

	51809147509662559712435121884032142914314444742894654484216599741222135929393n => A
	:CALL(squareFrBLS12381)
	45347221295384129861370031914782965894912260799098986630745624143501487386846n	:ASSERT

	20899246176659632616019758969823876657927794826551685728202273598983941015950n => A
	:CALL(squareFrBLS12381)
	35635663536297724866411072373766780430919675890266376242646957853075529413192n	:ASSERT

	16793249614762501868552667201519077921411106568734916836161547508105053927811n => A
	:CALL(squareFrBLS12381)
	43282665111360309748631494216454351340230608319347576201659275817573589029255n	:ASSERT

	24389473025316061389618448399009675940478191935538516839372742911869811778163n => A
	:CALL(squareFrBLS12381)
	11039558339954568214873684587493155074275937208049897704068743766810663113739n	:ASSERT

	13350338044962582447958756588687498354244268532016945015168743691546813842454n => A
	:CALL(squareFrBLS12381)
	4262929471495491388944131233807811126342143625258984805492385783658401517344n	:ASSERT

        ; 5] Inversion
	29756743500327599813582516199401075667353460256263043698840578942200794236390n => A
	:CALL(invFrBLS12381)
	19636348309683510359236621782602903135395487438435978012902302828799637024944n	:ASSERT

	43961590323514534025416700052928523903831238543219792034472406999491592496622n => A
	:CALL(invFrBLS12381)
	405245159461073474765779200655884309472110612248275032904446774448210117744n	:ASSERT

	3892662881573874958312955883365549372276273744794265041479246298763086513437n => A
	:CALL(invFrBLS12381)
	20206087090253307817590396327489216987784211952547272505596543285113651566058n	:ASSERT

	14158896798011820496897450759012017229865489239580256729287053532989242695781n => A
	:CALL(invFrBLS12381)
	50783189352687663774386299924886304458719804552457676981085766339199240420073n	:ASSERT

	17189083434793568047794625120679227194707161515596789049469040069648829718902n => A
	:CALL(invFrBLS12381)
	10919597090535718039265696483982537912802306919616131587761141440638412519659n	:ASSERT

	8821015108416465468571397960535996357483276262699188213186283948447416103990n => A
	:CALL(invFrBLS12381)
	30294459430338402795494154719013226509521317205810459555216240224218385514624n	:ASSERT

	13482960573331600789049492446793087572647721875541584801933844299513604466968n => A
	:CALL(invFrBLS12381)
	27632691432964249593314726416861147929633594617841393553142294331962225942891n	:ASSERT

	20596696002546746311957183551901946535685343407235674354440173564956473922436n => A
	:CALL(invFrBLS12381)
	37009997757326308024309269478957887162508476516870954799671668122551613430212n	:ASSERT

	30309132431545868850910552086657908120570549963856498143861276388524359671938n => A
	:CALL(invFrBLS12381)
	44642604957434435188350280915465657625514806509488658898483055694560174575535n	:ASSERT

	32385833732020051194203079514912224599107620940553986991705643651572925141688n => A
	:CALL(invFrBLS12381)
	34834217400983738574426365928264850532073387367380403282772520617903980503592n	:ASSERT

        ; 6] Reduction
	36068396139652115285699563519402090526237604493039894235665938685907675757734n => A
	:CALL(reduceFrBLS12381)
	36068396139652115285699563519402090526237604493039894235665938685907675757734n	:ASSERT

	50479613281254007174515447398595116983143153121709485986254225581684051414703n => A
	:CALL(reduceFrBLS12381)
	50479613281254007174515447398595116983143153121709485986254225581684051414703n	:ASSERT

	32918259153695649370051264010606204913215253550308351015990841667263885886020n => A
	:CALL(reduceFrBLS12381)
	32918259153695649370051264010606204913215253550308351015990841667263885886020n	:ASSERT

	11233721567866789423031297871711514062434978468252454926086390910800974822800n => A
	:CALL(reduceFrBLS12381)
	11233721567866789423031297871711514062434978468252454926086390910800974822800n	:ASSERT

	49560453242234830065594032047120547179076999475642249520966820019935924169921n => A
	:CALL(reduceFrBLS12381)
	49560453242234830065594032047120547179076999475642249520966820019935924169921n	:ASSERT

	50538871192357269552189490176114037288261040713280116274717422235248832121262n => A
	:CALL(reduceFrBLS12381)
	50538871192357269552189490176114037288261040713280116274717422235248832121262n	:ASSERT

	20523307275429071693689749976838349669445413944459966539390194579888617964627n => A
	:CALL(reduceFrBLS12381)
	20523307275429071693689749976838349669445413944459966539390194579888617964627n	:ASSERT

	1573104527152410025385354863819216471695445775172622087985992087962165035743n => A
	:CALL(reduceFrBLS12381)
	1573104527152410025385354863819216471695445775172622087985992087962165035743n	:ASSERT

	4769433131064079659521540146375869859744226256419235733034294691605770800102n => A
	:CALL(reduceFrBLS12381)
	4769433131064079659521540146375869859744226256419235733034294691605770800102n	:ASSERT

	8729815464422597145524962128373555577708088290847337718064446594623558152526n => A
	:CALL(reduceFrBLS12381)
	8729815464422597145524962128373555577708088290847337718064446594623558152526n	:ASSERT

        ; 7] Exponentiation by 4096


end:

        $ => A           :MLOAD(initial_A)
        $ => B           :MLOAD(initial_B)
        $ => C           :MLOAD(initial_C)
        $ => D           :MLOAD(initial_D)
        $ => E           :MLOAD(initial_E)
        $ => CTX         :MLOAD(initial_CTX)
        $ => SP          :MLOAD(initial_SP)
        $ => PC          :MLOAD(initial_PC)
        $ => GAS         :MLOAD(initial_GAS)
        $ => SR          :MLOAD(initial_SR)
        $ => RR          :MLOAD(initial_RR)
        $ => HASHPOS     :MLOAD(initial_HASHPOS)
        $ => RCX         :MLOAD(initial_RCX)

; label finalizeExecution needed by executor C++
finalizeExecution:
        ${beforeLast()}  : JMPN(finalizeExecution)

                         : JMP(start)
opINVALID:
; label checkAndSaveFrom needed by executor C++
checkAndSaveFrom:
                         :JMP(opINVALID)

INCLUDE "../src/FrBLS12381/reduceFrBLS12381.zkasm"
INCLUDE "../src/FrBLS12381/addFrBLS12381.zkasm"
INCLUDE "../src/FrBLS12381/subFrBLS12381.zkasm"
INCLUDE "../src/FrBLS12381/mulFrBLS12381.zkasm"
INCLUDE "../src/FrBLS12381/squareFrBLS12381.zkasm"
INCLUDE "../src/FrBLS12381/invFrBLS12381.zkasm"
INCLUDE "../src/FrBLS12381/expBy4096BLS12381.zkasm"
INCLUDE "../src/FrBLS12381/polevalFrBLS12381.zkasm"