; constants needed by executor C++
CONST %N = 2**19
CONST %MAX_CNT_STEPS_LIMIT = %N
CONST %MAX_CNT_ARITH_LIMIT = %N
CONST %MAX_CNT_BINARY_LIMIT = %N
CONST %MAX_CNT_MEM_ALIGN_LIMIT = %N
CONST %MAX_CNT_KECCAK_F_LIMIT = %N
CONST %MAX_CNT_PADDING_PG_LIMIT = %N
CONST %MAX_CNT_POSEIDON_G_LIMIT = %N

INCLUDE "../src/constantsBLS12381.zkasm"

VAR GLOBAL lastHashKId
VAR GLOBAL lastHashPId

VAR GLOBAL initial_A
VAR GLOBAL initial_B
VAR GLOBAL initial_C
VAR GLOBAL initial_D
VAR GLOBAL initial_E
VAR GLOBAL initial_CTX
VAR GLOBAL initial_SP
VAR GLOBAL initial_PC
VAR GLOBAL initial_GAS
VAR GLOBAL initial_SR
VAR GLOBAL initial_RR
VAR GLOBAL initial_HASHPOS
VAR GLOBAL initial_RCX

start:

        STEP => A
        0 :ASSERT


        A           :MSTORE(initial_A)
        B           :MSTORE(initial_B)
        C           :MSTORE(initial_C)
        D           :MSTORE(initial_D)
        E           :MSTORE(initial_E)
        CTX         :MSTORE(initial_CTX)
        SP          :MSTORE(initial_SP)
        PC          :MSTORE(initial_PC)
        GAS         :MSTORE(initial_GAS)
        SR          :MSTORE(initial_SR)
        RR          :MSTORE(initial_RR)
        HASHPOS     :MSTORE(initial_HASHPOS)
        RCX         :MSTORE(initial_RCX)
        0 => A,B,C,D,E,CTX, SP, PC, GAS, SR, RR, HASHPOS, RCX

        -1          :MSTORE(lastHashKId)
        -1          :MSTORE(lastHashPId)

INCLUDE "./examplePol.ignore.zkasm"

        ; 1] Edge case tests (roots of unity evaluation)
        ; 1.1] 1st root of unity
        1n	:MSTORE(polEvalFrBLS12381_z)
	:CALL(polEvalFrBLS12381)
        36610018466122213708127252317095384690041235796724421439496253748320907736754n	:MLOAD(polEvalFrBLS12381_y)

        ; 1.2] 14-th root of unity
        11957048330190158407553673532887214860319288945089628431652556183835477063577n	:MSTORE(polEvalFrBLS12381_z)
	:CALL(polEvalFrBLS12381)
        44489292353887233691549275886793532115534137779736038795410215435781806355977n	:MLOAD(polEvalFrBLS12381_y)

        ; 1.3] last root of unity
        25829815649260311651249373569448671287036547786131478959351418120540316250978n	:MSTORE(polEvalFrBLS12381_z)
	:CALL(polEvalFrBLS12381)
        31554869233152363317265091065542902447782881850139849705759347652774784710350n	:MLOAD(polEvalFrBLS12381_y)

        ; 2] Random evals
        36205834425814632942092480508157905504796362721007079248535669329170189644397n  :MSTORE(polEvalFrBLS12381_z)
        :CALL(polEvalFrBLS12381)
        12240118466755860160313916275227139444061332042748184982488923389242962367903n  :MLOAD(polEvalFrBLS12381_y)

        10670018747882146073607449940172278565369385099354929320461643771342548489851n  :MSTORE(polEvalFrBLS12381_z)
        :CALL(polEvalFrBLS12381)
        43617175482913702554277480070028061598535555890139294220390184291471912824206n  :MLOAD(polEvalFrBLS12381_y)

        40715468678423441183966973205819066376953648696672780606636447165717532389594n  :MSTORE(polEvalFrBLS12381_z)
        :CALL(polEvalFrBLS12381)
        29362384634618606671482958489368712502102692304435085030270387583563606877965n  :MLOAD(polEvalFrBLS12381_y)

        41105195839917395283096181470043696937919976915669794739825626817971204394965n  :MSTORE(polEvalFrBLS12381_z)
        :CALL(polEvalFrBLS12381)
        3698535501774873668070697124469844254193906695327516931250181956600976661229n   :MLOAD(polEvalFrBLS12381_y)

        2983361116726493157507810274437440145304462986944263515090515815812974917385n   :MSTORE(polEvalFrBLS12381_z)
        :CALL(polEvalFrBLS12381)
        28347027394166938311832355543371713481814105315726303235434167312586685601241n  :MLOAD(polEvalFrBLS12381_y)

        19370165488351184331471497082496999048969078968210924682616683147132157195797n  :MSTORE(polEvalFrBLS12381_z)
        :CALL(polEvalFrBLS12381)
        13940063875079804495844263731474258243691050864702632649884309737784642009824n  :MLOAD(polEvalFrBLS12381_y)

        34407601456212207692968556237854223649355392505777364775745521599879812680440n  :MSTORE(polEvalFrBLS12381_z)
        :CALL(polEvalFrBLS12381)
        5648213965927460818461986044249044859597695866328569663012065757535005510725n   :MLOAD(polEvalFrBLS12381_y)

        13659749197226221285316935587481312229018312380511654976474103299620908692757n  :MSTORE(polEvalFrBLS12381_z)
        :CALL(polEvalFrBLS12381)
        43946534803168429116460240379312552740410176984016175604600462010322901294735n  :MLOAD(polEvalFrBLS12381_y)

        19483487365143050918325877325101583114854276654994487493647451977280783135414n  :MSTORE(polEvalFrBLS12381_z)
        :CALL(polEvalFrBLS12381)
        31158484855050404559888698604753501363445343374203264038823538299255863495209n  :MLOAD(polEvalFrBLS12381_y)

        33819152583625155490113280223947495990283039580182752515373853732554920858164n  :MSTORE(polEvalFrBLS12381_z)
        :CALL(polEvalFrBLS12381)
        37664663143961022959541445271911524365505350780049542875505087010599735428812n  :MLOAD(polEvalFrBLS12381_y)

        ; 3] Some input with alias
        ; 3.1] Alias in z
        88641709600940823421540221016343871342486915221534717071139328029108770828910n  :MSTORE(polEvalFrBLS12381_z)
        :CALL(polEvalFrBLS12381)
        12240118466755860160313916275227139444061332042748184982488923389242962367903n  :MLOAD(polEvalFrBLS12381_y)

        ; 3.2] Alias in pol_eval_0
        36205834425814632942092480508157905504796362721007079248535669329170189644397n  :MSTORE(polEvalFrBLS12381_z)
        89045893641248404187574992825281350527731788297252059262099912448259488921267n  :MSTORE(polEvalFrBLS12381_pol_eval)
        1                                                                               :MSTORE(polEvalFrBLS12381_index)
        :CALL(polEvalFrBLS12381)
        12240118466755860160313916275227139444061332042748184982488923389242962367903n  :MLOAD(polEvalFrBLS12381_y)

        ; 3.3] Alias in pol_eval_4095
        36205834425814632942092480508157905504796362721007079248535669329170189644397n  :MSTORE(polEvalFrBLS12381_z)
        36610018466122213708127252317095384690041235796724421439496253748320907736754n  :MSTORE(polEvalFrBLS12381_pol_eval)
        4095n => RR
        83990744408278553796712831573728868285473434350667487528363006352713365894863n	:MSTORE(polEvalFrBLS12381_pol_eval + RR)
        4096                                                                            :MSTORE(polEvalFrBLS12381_index)
        :CALL(polEvalFrBLS12381)
        12240118466755860160313916275227139444061332042748184982488923389242962367903n  :MLOAD(polEvalFrBLS12381_y)

INCLUDE "./examplePolAlias.ignore.zkasm"

        ; 3.4] Alias in every evaluation
        36205834425814632942092480508157905504796362721007079248535669329170189644397n  :MSTORE(polEvalFrBLS12381_z)
        1                                                                               :MSTORE(polEvalFrBLS12381_index)
        :CALL(polEvalFrBLS12381)
        12240118466755860160313916275227139444061332042748184982488923389242962367903n  :MLOAD(polEvalFrBLS12381_y)

        :JMP(end)

;@info function to force a failed assert
failAssert:
    1 => A
    2               :ASSERT

end:

        $ => A           :MLOAD(initial_A)
        $ => B           :MLOAD(initial_B)
        $ => C           :MLOAD(initial_C)
        $ => D           :MLOAD(initial_D)
        $ => E           :MLOAD(initial_E)
        $ => CTX         :MLOAD(initial_CTX)
        $ => SP          :MLOAD(initial_SP)
        $ => PC          :MLOAD(initial_PC)
        $ => GAS         :MLOAD(initial_GAS)
        $ => SR          :MLOAD(initial_SR)
        $ => RR          :MLOAD(initial_RR)
        $ => HASHPOS     :MLOAD(initial_HASHPOS)
        $ => RCX         :MLOAD(initial_RCX)

; label finalizeExecution needed by executor C++
finalizeExecution:
        ${beforeLast()}  : JMPN(finalizeExecution)

                         : JMP(start)
opINVALID:
; label checkAndSaveFrom needed by executor C++
checkAndSaveFrom:
                         :JMP(opINVALID)

INCLUDE "../src/FRBLS12381/reduceFrBLS12381.zkasm"
INCLUDE "../src/FRBLS12381/addFrBLS12381.zkasm"
INCLUDE "../src/FRBLS12381/subFrBLS12381.zkasm"
INCLUDE "../src/FRBLS12381/mulFrBLS12381.zkasm"
INCLUDE "../src/FRBLS12381/squareFrBLS12381.zkasm"
INCLUDE "../src/FRBLS12381/invFrBLS12381.zkasm"
INCLUDE "../src/FRBLS12381/expBy4096FrBLS12381.zkasm"
INCLUDE "../src/FRBLS12381/polEvalFrBLS12381.zkasm"