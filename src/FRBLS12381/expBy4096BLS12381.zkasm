;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; POST: The result is in the range [0,BLS12_381_R) because if falls back to Fr arithmetic
;;
;; expBy4096BLS12381:
;;             in: A ∈ [0, 2²⁵⁶-1]
;;             out: A = A⁴⁰⁹⁶ (mod BLS12_381_R) ∈ Fr
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

VAR GLOBAL expBy4096BLS12381_a0_x
VAR GLOBAL expBy4096BLS12381_a0_y

VAR GLOBAL expBy4096BLS12381_RR

expBy4096BLS12381:
        RR              :MSTORE(expBy4096BLS12381_RR)

        ; Is a = 0?
        0n => B
        $ => A  :MLOAD(expBy4096BLS12381_a0_x)
        $       :EQ, JMPNC(__expBy4096BLS12381_a_continue1)
        $ => A  :MLOAD(expBy4096BLS12381_a0_y)
        $       :EQ, JMPNC(__expBy4096BLS12381_a_continue1)
        $ => A  :MLOAD(expBy4096BLS12381_a2_x)
        $       :EQ, JMPNC(__expBy4096BLS12381_a_continue1)
        $ => A  :MLOAD(expBy4096BLS12381_a2_y)
        $       :EQ, JMPNC(__expBy4096BLS12381_a_continue1)
        $ => A  :MLOAD(expBy4096BLS12381_a4_x)
        $       :EQ, JMPNC(__expBy4096BLS12381_a_continue1)
        $ => A  :MLOAD(expBy4096BLS12381_a4_y)
        $       :EQ, JMPNC(__expBy4096BLS12381_a_continue1)
        $ => A  :MLOAD(expBy4096BLS12381_a1_x)
        $       :EQ, JMPNC(__expBy4096BLS12381_a_continue1)
        $ => A  :MLOAD(expBy4096BLS12381_a1_y)
        $       :EQ, JMPNC(__expBy4096BLS12381_a_continue1)
        $ => A  :MLOAD(expBy4096BLS12381_a3_x)
        $       :EQ, JMPNC(__expBy4096BLS12381_a_continue1)
        $ => A  :MLOAD(expBy4096BLS12381_a3_y)
        $       :EQ, JMPNC(__expBy4096BLS12381_a_continue1)
        $ => A  :MLOAD(expBy4096BLS12381_a5_x)
        $       :EQ, JMPNC(__expBy4096BLS12381_a_continue1)
        $ => A  :MLOAD(expBy4096BLS12381_a5_y)
        $       :EQ, JMPC(expBy4096BLS12381_a_is_zero)
                __expBy4096BLS12381_a_continue1:

        ; Is a = 1?
        1n => B
        $ => A  :MLOAD(expBy4096BLS12381_a0_x)
        $       :EQ, JMPNC(__expBy4096BLS12381_a_continue2)
        0n => B
        $ => A  :MLOAD(expBy4096BLS12381_a0_y)
        $       :EQ, JMPNC(__expBy4096BLS12381_a_continue2)
        $ => A  :MLOAD(expBy4096BLS12381_a2_x)
        $       :EQ, JMPNC(__expBy4096BLS12381_a_continue2)
        $ => A  :MLOAD(expBy4096BLS12381_a2_y)
        $       :EQ, JMPNC(__expBy4096BLS12381_a_continue2)
        $ => A  :MLOAD(expBy4096BLS12381_a4_x)
        $       :EQ, JMPNC(__expBy4096BLS12381_a_continue2)
        $ => A  :MLOAD(expBy4096BLS12381_a4_y)
        $       :EQ, JMPNC(__expBy4096BLS12381_a_continue2)
        $ => A  :MLOAD(expBy4096BLS12381_a1_x)
        $       :EQ, JMPNC(__expBy4096BLS12381_a_continue2)
        $ => A  :MLOAD(expBy4096BLS12381_a1_y)
        $       :EQ, JMPNC(__expBy4096BLS12381_a_continue2)
        $ => A  :MLOAD(expBy4096BLS12381_a3_x)
        $       :EQ, JMPNC(__expBy4096BLS12381_a_continue2)
        $ => A  :MLOAD(expBy4096BLS12381_a3_y)
        $       :EQ, JMPNC(__expBy4096BLS12381_a_continue2)
        $ => A  :MLOAD(expBy4096BLS12381_a5_x)
        $       :EQ, JMPNC(__expBy4096BLS12381_a_continue2)
        $ => A  :MLOAD(expBy4096BLS12381_a5_y)
        $       :EQ, JMPC(expBy4096BLS12381_a_is_one)
                __expBy4096BLS12381_a_continue2:

        59 => RCX

        ; We manually compute the first iterations to avoid branching: 10001

        ; 1] First bit is 1 and second bit is 0, so set c = a,
        ;    compress the input and compute the compressed square C(a²)
        $ => A          :MLOAD(expBy4096BLS12381_a0_x)
        $ => B          :MLOAD(expBy4096BLS12381_a0_y)
        A               :MSTORE(expBy4096BLS12381_c0_x)
        B               :MSTORE(expBy4096BLS12381_c0_y)
        A               :MSTORE(compressFp12BN254_a0_x)
        B               :MSTORE(compressFp12BN254_a0_y)
        $ => A          :MLOAD(expBy4096BLS12381_a2_x)
        $ => B          :MLOAD(expBy4096BLS12381_a2_y)
        A               :MSTORE(expBy4096BLS12381_c2_x)
        B               :MSTORE(expBy4096BLS12381_c2_y)
        A               :MSTORE(compressFp12BN254_a2_x)
        B               :MSTORE(compressFp12BN254_a2_y)
        $ => A          :MLOAD(expBy4096BLS12381_a4_x)
        $ => B          :MLOAD(expBy4096BLS12381_a4_y)
        A               :MSTORE(expBy4096BLS12381_c4_x)
        B               :MSTORE(expBy4096BLS12381_c4_y)
        A               :MSTORE(compressFp12BN254_a4_x)
        B               :MSTORE(compressFp12BN254_a4_y)
        $ => A          :MLOAD(expBy4096BLS12381_a1_x)
        $ => B          :MLOAD(expBy4096BLS12381_a1_y)
        A               :MSTORE(expBy4096BLS12381_c1_x)
        B               :MSTORE(expBy4096BLS12381_c1_y)
        A               :MSTORE(compressFp12BN254_a1_x)
        B               :MSTORE(compressFp12BN254_a1_y)
        $ => A          :MLOAD(expBy4096BLS12381_a3_x)
        $ => B          :MLOAD(expBy4096BLS12381_a3_y)
        A               :MSTORE(expBy4096BLS12381_c3_x)
        B               :MSTORE(expBy4096BLS12381_c3_y)
        A               :MSTORE(compressFp12BN254_a3_x)
        B               :MSTORE(compressFp12BN254_a3_y)
        $ => A          :MLOAD(expBy4096BLS12381_a5_x)
        $ => B          :MLOAD(expBy4096BLS12381_a5_y)
        A               :MSTORE(expBy4096BLS12381_c5_x)
        B               :MSTORE(expBy4096BLS12381_c5_y)
        A               :MSTORE(compressFp12BN254_a5_x)
        B               :MSTORE(compressFp12BN254_a5_y), CALL(compressFp12BN254)

        $ => A          :MLOAD(compressFp12BN254_Ca2_x)
        $ => B          :MLOAD(compressFp12BN254_Ca2_y)
        A               :MSTORE(squareCompCycloFp12BN254_Ca2_x)
        B               :MSTORE(squareCompCycloFp12BN254_Ca2_y)
        $ => A          :MLOAD(compressFp12BN254_Ca3_x)
        $ => B          :MLOAD(compressFp12BN254_Ca3_y)
        A               :MSTORE(squareCompCycloFp12BN254_Ca3_x)
        B               :MSTORE(squareCompCycloFp12BN254_Ca3_y)
        $ => A          :MLOAD(compressFp12BN254_Ca4_x)
        $ => B          :MLOAD(compressFp12BN254_Ca4_y)
        A               :MSTORE(squareCompCycloFp12BN254_Ca4_x)
        B               :MSTORE(squareCompCycloFp12BN254_Ca4_y)
        $ => A          :MLOAD(compressFp12BN254_Ca5_x)
        $ => B          :MLOAD(compressFp12BN254_Ca5_y)
        A               :MSTORE(squareCompCycloFp12BN254_Ca5_x)
        B               :MSTORE(squareCompCycloFp12BN254_Ca5_y), CALL(squareCompCycloFp12BN254)

        ; 2] Third bit is 0, so compute C(c⁴)
        $ => A          :MLOAD(squareCompCycloFp12BN254_Cb2_x)
        $ => B          :MLOAD(squareCompCycloFp12BN254_Cb2_y)
        A               :MSTORE(squareCompCycloFp12BN254_Ca2_x)
        B               :MSTORE(squareCompCycloFp12BN254_Ca2_y)
        $ => A          :MLOAD(squareCompCycloFp12BN254_Cb3_x)
        $ => B          :MLOAD(squareCompCycloFp12BN254_Cb3_y)
        A               :MSTORE(squareCompCycloFp12BN254_Ca3_x)
        B               :MSTORE(squareCompCycloFp12BN254_Ca3_y)
        $ => A          :MLOAD(squareCompCycloFp12BN254_Cb4_x)
        $ => B          :MLOAD(squareCompCycloFp12BN254_Cb4_y)
        A               :MSTORE(squareCompCycloFp12BN254_Ca4_x)
        B               :MSTORE(squareCompCycloFp12BN254_Ca4_y)
        $ => A          :MLOAD(squareCompCycloFp12BN254_Cb5_x)
        $ => B          :MLOAD(squareCompCycloFp12BN254_Cb5_y)
        A               :MSTORE(squareCompCycloFp12BN254_Ca5_x)
        B               :MSTORE(squareCompCycloFp12BN254_Ca5_y), CALL(squareCompCycloFp12BN254)

        ; 3] Fourth bit is 0, so compute C(c⁸)
        $ => A          :MLOAD(squareCompCycloFp12BN254_Cb2_x)
        $ => B          :MLOAD(squareCompCycloFp12BN254_Cb2_y)
        A               :MSTORE(squareCompCycloFp12BN254_Ca2_x)
        B               :MSTORE(squareCompCycloFp12BN254_Ca2_y)
        $ => A          :MLOAD(squareCompCycloFp12BN254_Cb3_x)
        $ => B          :MLOAD(squareCompCycloFp12BN254_Cb3_y)
        A               :MSTORE(squareCompCycloFp12BN254_Ca3_x)
        B               :MSTORE(squareCompCycloFp12BN254_Ca3_y)
        $ => A          :MLOAD(squareCompCycloFp12BN254_Cb4_x)
        $ => B          :MLOAD(squareCompCycloFp12BN254_Cb4_y)
        A               :MSTORE(squareCompCycloFp12BN254_Ca4_x)
        B               :MSTORE(squareCompCycloFp12BN254_Ca4_y)
        $ => A          :MLOAD(squareCompCycloFp12BN254_Cb5_x)
        $ => B          :MLOAD(squareCompCycloFp12BN254_Cb5_y)
        A               :MSTORE(squareCompCycloFp12BN254_Ca5_x)
        B               :MSTORE(squareCompCycloFp12BN254_Ca5_y), CALL(squareCompCycloFp12BN254)

        ; 4] Fifth bit is 1, so compute C(c¹⁶), decompress to obtain c¹⁶ and multiply by a
        $ => A          :MLOAD(squareCompCycloFp12BN254_Cb2_x)
        $ => B          :MLOAD(squareCompCycloFp12BN254_Cb2_y)
        A               :MSTORE(squareCompCycloFp12BN254_Ca2_x)
        B               :MSTORE(squareCompCycloFp12BN254_Ca2_y)
        $ => A          :MLOAD(squareCompCycloFp12BN254_Cb3_x)
        $ => B          :MLOAD(squareCompCycloFp12BN254_Cb3_y)
        A               :MSTORE(squareCompCycloFp12BN254_Ca3_x)
        B               :MSTORE(squareCompCycloFp12BN254_Ca3_y)
        $ => A          :MLOAD(squareCompCycloFp12BN254_Cb4_x)
        $ => B          :MLOAD(squareCompCycloFp12BN254_Cb4_y)
        A               :MSTORE(squareCompCycloFp12BN254_Ca4_x)
        B               :MSTORE(squareCompCycloFp12BN254_Ca4_y)
        $ => A          :MLOAD(squareCompCycloFp12BN254_Cb5_x)
        $ => B          :MLOAD(squareCompCycloFp12BN254_Cb5_y)
        A               :MSTORE(squareCompCycloFp12BN254_Ca5_x)
        B               :MSTORE(squareCompCycloFp12BN254_Ca5_y), CALL(squareCompCycloFp12BN254)

        $ => A          :MLOAD(squareCompCycloFp12BN254_Cb2_x)
        $ => B          :MLOAD(squareCompCycloFp12BN254_Cb2_y)
        A               :MSTORE(decompressFp12BN254_Ca2_x)
        B               :MSTORE(decompressFp12BN254_Ca2_y)
        $ => A          :MLOAD(squareCompCycloFp12BN254_Cb3_x)
        $ => B          :MLOAD(squareCompCycloFp12BN254_Cb3_y)
        A               :MSTORE(decompressFp12BN254_Ca3_x)
        B               :MSTORE(decompressFp12BN254_Ca3_y)
        $ => A          :MLOAD(squareCompCycloFp12BN254_Cb4_x)
        $ => B          :MLOAD(squareCompCycloFp12BN254_Cb4_y)
        A               :MSTORE(decompressFp12BN254_Ca4_x)
        B               :MSTORE(decompressFp12BN254_Ca4_y)
        $ => A          :MLOAD(squareCompCycloFp12BN254_Cb5_x)
        $ => B          :MLOAD(squareCompCycloFp12BN254_Cb5_y)
        A               :MSTORE(decompressFp12BN254_Ca5_x)
        B               :MSTORE(decompressFp12BN254_Ca5_y), CALL(decompressFp12BN254)

        $ => A          :MLOAD(expBy4096BLS12381_c0_x)
        $ => B          :MLOAD(expBy4096BLS12381_c0_y)
        A               :MSTORE(mulFp12BN254_a11_x)
        B               :MSTORE(mulFp12BN254_a11_y)
        $ => A          :MLOAD(expBy4096BLS12381_c2_x)
        $ => B          :MLOAD(expBy4096BLS12381_c2_y)
        A               :MSTORE(mulFp12BN254_a21_x)
        B               :MSTORE(mulFp12BN254_a21_y)
        $ => A          :MLOAD(expBy4096BLS12381_c4_x)
        $ => B          :MLOAD(expBy4096BLS12381_c4_y)
        A               :MSTORE(mulFp12BN254_a12_x)
        B               :MSTORE(mulFp12BN254_a12_y)
        $ => A          :MLOAD(expBy4096BLS12381_c1_x)
        $ => B          :MLOAD(expBy4096BLS12381_c1_y)
        A               :MSTORE(mulFp12BN254_a22_x)
        B               :MSTORE(mulFp12BN254_a22_y)
        $ => A          :MLOAD(expBy4096BLS12381_c3_x)
        $ => B          :MLOAD(expBy4096BLS12381_a3_y)
        A               :MSTORE(mulFp12BN254_a13_x)
        B               :MSTORE(mulFp12BN254_a13_y)
        $ => A          :MLOAD(expBy4096BLS12381_c5_x)
        $ => B          :MLOAD(expBy4096BLS12381_c5_y)
        A               :MSTORE(mulFp12BN254_a23_x)
        B               :MSTORE(mulFp12BN254_a23_y)
        $ => A          :MLOAD(decompressFp12BN254_a0_x)
        $ => B          :MLOAD(decompressFp12BN254_a0_y)
        A               :MSTORE(mulFp12BN254_b11_x)
        B               :MSTORE(mulFp12BN254_b11_y)
        $ => A          :MLOAD(decompressFp12BN254_a2_x)
        $ => B          :MLOAD(decompressFp12BN254_a2_y)
        A               :MSTORE(mulFp12BN254_b21_x)
        B               :MSTORE(mulFp12BN254_b21_y)
        $ => A          :MLOAD(decompressFp12BN254_a4_x)
        $ => B          :MLOAD(decompressFp12BN254_a4_y)
        A               :MSTORE(mulFp12BN254_b12_x)
        B               :MSTORE(mulFp12BN254_b12_y)
        $ => A          :MLOAD(decompressFp12BN254_a1_x)
        $ => B          :MLOAD(decompressFp12BN254_a1_y)
        A               :MSTORE(mulFp12BN254_b22_x)
        B               :MSTORE(mulFp12BN254_b22_y)
        $ => A          :MLOAD(decompressFp12BN254_a3_x)
        $ => B          :MLOAD(decompressFp12BN254_a3_y)
        A               :MSTORE(mulFp12BN254_b13_x)
        B               :MSTORE(mulFp12BN254_b13_y)
        $ => A          :MLOAD(decompressFp12BN254_a5_x)
        $ => B          :MLOAD(decompressFp12BN254_a5_y)
        A               :MSTORE(mulFp12BN254_b23_x)
        B               :MSTORE(mulFp12BN254_b23_y), CALL(mulFp12BN254)

                        :JMP(expBy4096BLS12381_loop)

expBy4096BLS12381_a_is_zero:
        ; c = 0
        0n              :MSTORE(expBy4096BLS12381_c0_x)
        0n              :MSTORE(expBy4096BLS12381_c0_y)
        0n              :MSTORE(expBy4096BLS12381_c2_x)
        0n              :MSTORE(expBy4096BLS12381_c2_y)
        0n              :MSTORE(expBy4096BLS12381_c4_x)
        0n              :MSTORE(expBy4096BLS12381_c4_y)
        0n              :MSTORE(expBy4096BLS12381_c1_x)
        0n              :MSTORE(expBy4096BLS12381_c1_y)
        0n              :MSTORE(expBy4096BLS12381_c3_x)
        0n              :MSTORE(expBy4096BLS12381_c3_y)
        0n              :MSTORE(expBy4096BLS12381_c5_x)
        0n              :MSTORE(expBy4096BLS12381_c5_y)

                        :JMP(expBy4096BLS12381_end)

expBy4096BLS12381_a_is_one:
        ; c = 1
        1n              :MSTORE(expBy4096BLS12381_c0_x)
        0n              :MSTORE(expBy4096BLS12381_c0_y)
        0n              :MSTORE(expBy4096BLS12381_c2_x)
        0n              :MSTORE(expBy4096BLS12381_c2_y)
        0n              :MSTORE(expBy4096BLS12381_c4_x)
        0n              :MSTORE(expBy4096BLS12381_c4_y)
        0n              :MSTORE(expBy4096BLS12381_c1_x)
        0n              :MSTORE(expBy4096BLS12381_c1_y)
        0n              :MSTORE(expBy4096BLS12381_c3_x)
        0n              :MSTORE(expBy4096BLS12381_c3_y)
        0n              :MSTORE(expBy4096BLS12381_c5_x)
        0n              :MSTORE(expBy4096BLS12381_c5_y)

                        :JMP(expBy4096BLS12381_end)

expBy4096BLS12381_loop:
        RCX - 1 => RCX         :JMPZ(expBy4096BLS12381_last)

        ; We always square (in compressed form): C(c²)
        ; We square C(c²) and store the result
        $ => A          :MLOAD(squareCompCycloFp12BN254_Cb2_x)
        $ => B          :MLOAD(squareCompCycloFp12BN254_Cb2_y)
        A               :MSTORE(squareCompCycloFp12BN254_Ca2_x)
        B               :MSTORE(squareCompCycloFp12BN254_Ca2_y)
        $ => A          :MLOAD(squareCompCycloFp12BN254_Cb3_x)
        $ => B          :MLOAD(squareCompCycloFp12BN254_Cb3_y)
        A               :MSTORE(squareCompCycloFp12BN254_Ca3_x)
        B               :MSTORE(squareCompCycloFp12BN254_Ca3_y)
        $ => A          :MLOAD(squareCompCycloFp12BN254_Cb4_x)
        $ => B          :MLOAD(squareCompCycloFp12BN254_Cb4_y)
        A               :MSTORE(squareCompCycloFp12BN254_Ca4_x)
        B               :MSTORE(squareCompCycloFp12BN254_Ca4_y)
        $ => A          :MLOAD(squareCompCycloFp12BN254_Cb5_x)
        $ => B          :MLOAD(squareCompCycloFp12BN254_Cb5_y)
        A               :MSTORE(squareCompCycloFp12BN254_Ca5_x)
        B               :MSTORE(squareCompCycloFp12BN254_Ca5_y), CALL(squareCompCycloFp12BN254)

        ; We check if the MSB b of x is either 1 or 0
        RCX-1 => RR
                        :CALL(@xBinDecompBN254 + RR)

        ; if bit = 0, then repeat
        B               :JMPZ(expBy4096BLS12381_loop)

        ; else, multiply by the last result

expBy4096BLS12381_multiply:
        $ => A          :MLOAD(squareCompCycloFp12BN254_Cb2_x)
        $ => B          :MLOAD(squareCompCycloFp12BN254_Cb2_y)
        A               :MSTORE(decompressFp12BN254_Ca2_x)
        B               :MSTORE(decompressFp12BN254_Ca2_y)
        $ => A          :MLOAD(squareCompCycloFp12BN254_Cb3_x)
        $ => B          :MLOAD(squareCompCycloFp12BN254_Cb3_y)
        A               :MSTORE(decompressFp12BN254_Ca3_x)
        B               :MSTORE(decompressFp12BN254_Ca3_y)
        $ => A          :MLOAD(squareCompCycloFp12BN254_Cb4_x)
        $ => B          :MLOAD(squareCompCycloFp12BN254_Cb4_y)
        A               :MSTORE(decompressFp12BN254_Ca4_x)
        B               :MSTORE(decompressFp12BN254_Ca4_y)
        $ => A          :MLOAD(squareCompCycloFp12BN254_Cb5_x)
        $ => B          :MLOAD(squareCompCycloFp12BN254_Cb5_y)
        A               :MSTORE(decompressFp12BN254_Ca5_x)
        B               :MSTORE(decompressFp12BN254_Ca5_y), CALL(decompressFp12BN254)

        $ => A          :MLOAD(mulFp12BN254_c11_x)
        $ => B          :MLOAD(mulFp12BN254_c11_y)
        A               :MSTORE(mulFp12BN254_a11_x)
        B               :MSTORE(mulFp12BN254_a11_y)
        $ => A          :MLOAD(mulFp12BN254_c12_x)
        $ => B          :MLOAD(mulFp12BN254_c12_y)
        A               :MSTORE(mulFp12BN254_a12_x)
        B               :MSTORE(mulFp12BN254_a12_y)
        $ => A          :MLOAD(mulFp12BN254_c13_x)
        $ => B          :MLOAD(mulFp12BN254_c13_y)
        A               :MSTORE(mulFp12BN254_a13_x)
        B               :MSTORE(mulFp12BN254_a13_y)
        $ => A          :MLOAD(mulFp12BN254_c21_x)
        $ => B          :MLOAD(mulFp12BN254_c21_y)
        A               :MSTORE(mulFp12BN254_a21_x)
        B               :MSTORE(mulFp12BN254_a21_y)
        $ => A          :MLOAD(mulFp12BN254_c22_x)
        $ => B          :MLOAD(mulFp12BN254_c22_y)
        A               :MSTORE(mulFp12BN254_a22_x)
        B               :MSTORE(mulFp12BN254_a22_y)
        $ => A          :MLOAD(mulFp12BN254_c23_x)
        $ => B          :MLOAD(mulFp12BN254_c23_y)
        A               :MSTORE(mulFp12BN254_a23_x)
        B               :MSTORE(mulFp12BN254_a23_y)
        $ => A          :MLOAD(decompressFp12BN254_a0_x)
        $ => B          :MLOAD(decompressFp12BN254_a0_y)
        A               :MSTORE(mulFp12BN254_b11_x)
        B               :MSTORE(mulFp12BN254_b11_y)
        $ => A          :MLOAD(decompressFp12BN254_a2_x)
        $ => B          :MLOAD(decompressFp12BN254_a2_y)
        A               :MSTORE(mulFp12BN254_b21_x)
        B               :MSTORE(mulFp12BN254_b21_y)
        $ => A          :MLOAD(decompressFp12BN254_a4_x)
        $ => B          :MLOAD(decompressFp12BN254_a4_y)
        A               :MSTORE(mulFp12BN254_b12_x)
        B               :MSTORE(mulFp12BN254_b12_y)
        $ => A          :MLOAD(decompressFp12BN254_a1_x)
        $ => B          :MLOAD(decompressFp12BN254_a1_y)
        A               :MSTORE(mulFp12BN254_b22_x)
        B               :MSTORE(mulFp12BN254_b22_y)
        $ => A          :MLOAD(decompressFp12BN254_a3_x)
        $ => B          :MLOAD(decompressFp12BN254_a3_y)
        A               :MSTORE(mulFp12BN254_b13_x)
        B               :MSTORE(mulFp12BN254_b13_y)
        $ => A          :MLOAD(decompressFp12BN254_a5_x)
        $ => B          :MLOAD(decompressFp12BN254_a5_y)
        A               :MSTORE(mulFp12BN254_b23_x)
        B               :MSTORE(mulFp12BN254_b23_y), CALL(mulFp12BN254)

                        :JMP(expBy4096BLS12381_loop)

expBy4096BLS12381_last:
        ; Last asignments
        $ => A          :MLOAD(mulFp12BN254_c11_x)
        $ => B          :MLOAD(mulFp12BN254_c11_y)
        A               :MSTORE(expBy4096BLS12381_c0_x)
        B               :MSTORE(expBy4096BLS12381_c0_y)
        $ => A          :MLOAD(mulFp12BN254_c12_x)
        $ => B          :MLOAD(mulFp12BN254_c12_y)
        A               :MSTORE(expBy4096BLS12381_c4_x)
        B               :MSTORE(expBy4096BLS12381_c4_y)
        $ => A          :MLOAD(mulFp12BN254_c13_x)
        $ => B          :MLOAD(mulFp12BN254_c13_y)
        A               :MSTORE(expBy4096BLS12381_c3_x)
        B               :MSTORE(expBy4096BLS12381_c3_y)
        $ => A          :MLOAD(mulFp12BN254_c21_x)
        $ => B          :MLOAD(mulFp12BN254_c21_y)
        A               :MSTORE(expBy4096BLS12381_c2_x)
        B               :MSTORE(expBy4096BLS12381_c2_y)
        $ => A          :MLOAD(mulFp12BN254_c22_x)
        $ => B          :MLOAD(mulFp12BN254_c22_y)
        A               :MSTORE(expBy4096BLS12381_c1_x)
        B               :MSTORE(expBy4096BLS12381_c1_y)
        $ => A          :MLOAD(mulFp12BN254_c23_x)
        $ => B          :MLOAD(mulFp12BN254_c23_y)
        A               :MSTORE(expBy4096BLS12381_c5_x)
        B               :MSTORE(expBy4096BLS12381_c5_y)

expBy4096BLS12381_end:
        $ => RR         :MLOAD(expBy4096BLS12381_RR)
                        :RETURN

